= Umělá inteligence v počítačových hrách
:url: ./umela-inteligence-v-pocitacovych-hrach/
:page-group: vph
:page-order: VPH06

[NOTE]
====
Pohyb, kinematika, řízení chování. Prohledávání a hledání cest: A* nad datovými strukturami a heuristiky, reprezentace herního světa, Monte Carlo prohledávání, hierarchické hledání cest. Rozhodování, rozhodovací stromy, stavové automaty, stromy chování. Strategie a taktika, navigační body, taktická analýza.

_PA217_
====

== Pohyb

Postavy ve hrách se často hýbou, tedy mění svoji pozici a orientaci v herním světě. Mnohdy je žádoucí, aby se pohybovaly věrohodně:

--
* zpomalovaly,
* zrychlovaly,
* vyhýbaly se překážkám,
* utíkaly před nepřáteli,
* interagovaly s prostředím.
--

Pozice::
Tradičně je dána jako vektor stem:[(x, z)] nebo stem:[(x, y, z)].

Orientace::
Obvykle v radiánech. Desetinné číslo z intervalu stem:[\lbrack 0, 2\pi )].

Rychlost / velocity::
Změna pozice. Vektor stem:[(x, z)] nebo stem:[(x, y, z)].

Úhlová rychlost / angular velocity / "rotace"::
Změna rotace. Desetinné číslo z intervalu stem:[\lbrack 0, 2\pi )].

Agent::
Postava / objekt / entita vykonávájí pohyb a činící rozhodnutí.

=== Kinematika

Postavy se prostě pohybují bez ohledu na fyzikální korektnost.

--
* Výhodou je jednoduchost a předvídatelnost.
* Nevýhodou je, že pohyb nemusí být věrohodný.
* Příkladem je pohyb většiny postav ovládaných hráčem. Pokud hráč pustí `W`, chce obvykle zastavit hned.
--

Update::
V každém frame:
+
[source, csharp]
----
void Update(float deltaTime)
{
    Position += Velocity * deltaTime;
    Orientation = (Orientation + (AngularVelocity * deltaTime))
        % (2 * Math.PI);
    Velocity += SteeringLinear * deltaTime;
    AngularVelocity = (AngularVelocity + (SteeringAngular * deltaTime))
        % (2 * Math.PI);
}
----

=== Řízení chování / steering behaviors

Jednoduché algoritmy pro pohyb. Jsou škálovatelné a předvídatelné, ale mají problém s lokálními pastmi (zaseknou se a neví, jak ven).

Dynamic movement::
Fyzikálně korektní pohyb. Postavy zrychlují ve směru cíle, dosahují maximální rychlosti a zpomalují, pokud je cíl blízko.

Seek::
Přímočárý... doslova. Najde vektor mířící k cíli a aplikuje je jej jako steering.
+
.Seek schematic <<steering>>
image::./img/vph06_seek.jpg[Seek schematic, 300]

Flee::
Jako seek, ale *od* cíle místo k cíli.

Arrival::
Jako seek, ale začne zpomalovat, když je blízko cíle, takže jej "nepřestřelí".
+
.Arrival schematic <<steering>>
image::./img/vph06_arrival.jpg[Arrival schematic, 300]

Departure::
Flee, ale agent zpomalí, jakmile je dostatečně daleko od cíle.

Pursue::
Agent pronásleduje agenta. Najde vektor mířící k cíli a aplikuje jej jako steering. Pokud se cítí obzvlášť chytrý, může předvídat, kterým směrem se cíl bude ubírat.
+
Příklad: predátor loví kořist.

Evade::
Agent se vyhýbá agentovi. Jako pursue, ale snaží se cíli vyhnout.
+
Příklad: kořist se vyhýbá predátorovi.

Wander::
Agent se hýbe náhodně. Není to ale tak jednoduché, jak se zdá, protože nechceme, aby sebou agent jen házel ze strany na stranu. Jako seek, ale k cíli se v každém kroku přidává drobný náhodný posun.

Object avoidance / vyhýbání se překážkám::
Agent detekuje, zda se v blízké době srazí s překážkou -- ray castingem, testy na overlapping -- a pokud ano, najde cíl, který je mimo překážku a aplikuje _seek_.
+
Má problém s úzkými překážkami a pastmi.

Flocking / chování hejna::
Chování celé skupiny agentů:
+
* _Separation / oddělení_: agent se snaží nenarážet do ostatních agentů v daném okolí.
* _Alignment / zarovnání_: pohybuj se (průměrně) stejným směrem a rychlostí jako ostatní agenti v okolí.
* _Cohesion / soudržnost_: pohybuj se směrem ke středu hmoty hejna.

Path following::
Agent směřuje ne _jen_ k pouhému bodu, ale k _nejbližšímu_ bodu na dané cestě a ten _seekuje_.

Predictive path following::
Agent předvídá, kde bude za krátkou chvíli a hledá _nejbližší_ bod na dané cestě k *této predikci*. Pohyb je plynulejší.

Kombinování steering behaviors::
Steering behaviors se dají kombinovat.
+
* _Blending_: provádí více steering behaviors najednou a výsledný vektor je jejich váženým průměrem.
* _Arbitration_: volí jedno steering behavior, které má absolutní moc.

== Pathfinding / hledání cest

Pathfinding řeší problém s agenty, kteří se chytají do pastí. Umožňuje jim naplánovat si cestu okolo konkávních oblastí i pomalu se měnících překážek. Není však užitečný v oblastech, které se často mění, a proto je kombinován se steering behaviors.

Pathfinding vnímá scénu jako graf, ve kterém hledá (obvykle nejkratší) cestu.

.Opakování link:../../szb/grafove-problemy/[Grafových problémů]
====

Graf stem:[G]::
Dvojice stem:[(V, E)], kde stem:[V] je množina uzlů a stem:[E] je množina hran mezi nimi.

Orientovaný / directed graf::
Záleží na směru hran.

Neorientovaný / undirected graf::
Na směru hran nezáleží.

Vážený / weighted graf::
Hrany mají cenu / váhu.

Breadth-first search / prohledávání do šířky (BFS)::
Prouzkoumává nejprve uzly v okolí počátečního uzlu, pak teprve uzly v okolí těchto uzlů, atd.

Depth-first search / prohledávání do hloubky (DFS)::
Prozkoumej jednoho souseda, pak jeho souseda, pak souseda toho souseda atd. dokud jsi tak hluboko, že nemáš kam jít. Pak se teprve vynoř o úroveň výš a zkus prozkoumat jiného souseda.

Shortest path algorithms / algoritmy pro nejkratší cestu::
Hledají nejkratší cestu mezi dvěma uzly. Používají nějakou heuristiku stem:[f] pro výběr dalšího uzlu k prozkoumání.

Dijkstra's algorithm / Dijkstrův algoritmus::
Podobný BFS, ale snaží se najít nejkratší cestu, ne nutně prozkoumat celý graf. Hranám přiřazuje cenu a vybírá ty s nejnižší cenou -- stem:[f] je nejnižší vzdálenost od počátečního uzlu.

====

=== A* algoritmus

Podobný Dijkstrovu algoritmu, ale navíc se snaží odhadnout, který směr je nejlepší. Používá heuristiku stem:[h] pro výběr dalšího uzlu k prozkoumání. Kombinuje Dijsktrův algoritmus s greedy best-first hledáním. <<astar>>

.A* algoritmus <<astar>>
image::./img/vph06_astar.png[width=100%]

[source, csharp]
----
record Node
{
    Vector3 Position;
    List<Node> Neighbors = new();
    
    // NB: We keep both scores because the heuristic is not guaranteed to be consistent.
    float GScore = float.Infinity; // Distance from start
    float FScore = float.Infinity; // Distance from start + heuristic
    Node? CameFrom = null;
}

// NB: Assumes all nodes are initialized as above.
List<Node> AStar(Node start, Node goal) {
    var toVisit = new PriorityQueue<Node, float>();
    start.GScore = 0;
    start.FScore = 0;
    toVisit.Enqueue(start, 0);

    Node current = start;
    while (current != goal) {
        var (current, gCurrent) = toVisit.Dequeue();

        foreach (var neighbor in current.Neighbors) {
            var gNeighbor = gCurrent + Distance(current, neighbor);
            if (gNeighbor < neighbor.GScore) {
                neighbor.GScore = gNeighbor;
            }

            var fNeighbor = neighbor.GScore + Heuristic(neighbor, goal);
            if (fNeighbor < neighbor.FScore) {
                neighbor.FScore = fNeighbor;
                neighbor.CameFrom = current;
                toVisit.Enqueue(neighbor, fNeighbor);
            }
        }
    }

    return null;
}

float Heuristic(Node a, Node b) {
    // Example: Euclidean distance
    return Vector3.Distance(a.Position, b.Position);
}
----

Nejkratší cestu lze pak zrekonstruovat takto:

[source, csharp]
----
List<Node> ReconstructPath(Node goal) {
    var path = new List<Node> { goal };
    var current = goal;
    while (current.CameFrom is not null) {
        current = current.CameFrom
        path.Add(current);
    }
    path.Reverse();
    return path;
}
----

Volba heuristiky::
+
--
* Čím přesnější bude odhad vzdálenosti k cíli, tím rychlejší A* bude.
* Pokud heuristika *podceňuje* vzdálenost k cíli, bude algoritmus pomalejší.
* Pokud heuristika *přeceňuje* vzdálenost k cíli, algoritmus nemusí najít nejkratší cestu.
* Heuristika je _admissible_ pokud nepřeceňuje.
--

Heuristika -- Euklidovská vzdálenost::
Poskytuje poměrně přesný nebo podceněný odhad vzdálenosti k cíli. Funguje dobře v exteriérech, ale v interiérech dává kvůli stěnám a dalším překážkám silně podhodnocené odhady. <<pa217>>
+
image::./img/vph06_euclidean_distance.png[width=400]

Clusterová (shluková) heuristika::
* Shlukuje uzly blízko sebe (např. v rámci místnosti).
* V rámci clusteru aplikuje Euklidovskou vzdálenost.
* Pro vzdálenosti mezi clustery si udržuje look-up table (LUT).
+
image::./img/vph06_cluster_heuristic.png[width=400]
+
image::./img/vph06_heuristic_comparison.png[width=100%]

=== Reprezentace herního světa

Agenti nevidí herní svět stejně jako hráči, vidí ho spíš jako graf s uzly a hranami.

Division scheme::
Popisuje, jak je level rozdělen na uzly a hrany. Má vlastnosti:
+
--
* _Kvantizace_: metoda převodu pozice na uzel.
* _Lokalizace_: metoda převodu uzlu na pozici.
* _Generace_: metoda vytvoření uzlů a hran. Může být manuální (třeba Dirichletovy domény) nebo automatická (třeba Visibility points).
* _Validita_: všechny uzly, mezi kterými je cesta, musí být vzájemně dosažitelné ve hře.
--

Tile-based / dlaždicové::
Některé hry, např real-time strategie (RTS), mají svět rozdělen do čtvercových / hexagonálních dlaždic. Díky tomu je jednoduché je převést na graf, neboť co dlaždice to uzel.
+
.Sid Meier's Civilization V <<civ5>>
image::./img/vph06_civilization.jpg[width=400]

Dirichletova doména / Voronoiův diagram::
Level designer určí _charakteristické body_. Vytvořené regiony jsou složeny z bodů nejbližších danému charakteristickému bodu.
+
.20 points and their Voronoi cells by link:https://commons.wikimedia.org/w/index.php?curid=38534275[Balu Ertl]
image::./img/vph06_voronoi.svg[width=400]

Points of visibility::
Je automatická metoda generování charakteristických bodů (typicky pro generování Voronoiova diagramu). Generuje je v místech, kde se geometrie levelu mění z konvexní na konkávní a naopak (např. v rozích místností). Posouvá je o šířku hráče.
+
V praxi může generovat příliš mnoho bodů, ale může sloužit jako užitečný základ pro manuální úpravy.
+
.Points of visibility <<ai-for-games>>
image::./img/vph06_points_of_visibility.png[width=400]

Navmesh / navigation mesh / navigační sítě::
Populární technika, kdy level designer popíše podlahové polygony. Agenti mohou chodit kamkoliv v rámci těchto polygonů a přecházet mezi těmi, které jsou spojené. Využívá geometrii už přítomnou v levelu nebo svoji vlastní.
+
.Navigation System in Unity <<navmesh>>
image::./img/vph06_navmesh.png[Navigation System in Unity, 400]
+
.Polygonal mesh graph <<ai-for-games>>
image::./img/vph06_polygonal_mesh_graph.png[width=400]

D* algoritmus::
Varianta A*, která se umí vyrovnat s dynamickými změnami v grafu.

Iterative Deepening A* (IDA*)::
Depth-first search s heuristikou. Iterative deepening znamená, že se postupně zvyšuje maximální hloubka prohledávání. <<ida-star>>

Simplified Memory Bounded A* (SMA*)::
A* co má nižší paměťové nároky.


=== Monte Carlo prohledávání

[TIP]
--
Monte Carlo::
Město známé pro svá casina.

Monte Carlo metoda::
Algoritmy a techniky spoléhající na náhodou, mega velké množiny vzorků a statistickou analýzu. <<monte-carlo>>
--

Monte Carlo tree search (MCTS)::
Heuristický algoritmus pro prohledávání stromových grafů. V kontextu deskových her se používá pro hledání nejlepšího tahu.<<mcts>>
+
--
1. _Selection_: vyber uzel reprezentující stav hry, ze kterého ještě hra neskončila.
2. _Expansion_: vytvoř možné volby ze zvoleného tahu.
3. _Simulation_: vyber volbu náhodně a odsimuluj hru až do konce.
4. _Backpropagation_: aktualizuj statistiky v uzlech na cestě od kořene k listu.
--
+
.Step of Monte Carlo tree search by link:https://commons.wikimedia.org/w/index.php?curid=88889583[Rmoss92]
image::./img/vph06_mcts.svg[width=100%]

Tree boundary::
Metoda (policy), kdy v uzlech nad _MCTS tree boundary_ jsou akce voleny inteligentně. Pod touto hranicí jsou akce voleny náhodně.

Upper confidence bound (UCT)::
Metrika pro volbu nejlepšího uzlu.
+
[stem]
++++
\text{UCT} = \overline{X_j} + C \sqrt{\frac{\ln n}{n_j}}
++++
+
kde:
+
--
* stem:[\overline{X_j}] je střední hodnota odměny z akce v uzlu stem:[j]. Může být třeba počet výher / počet her.
* stem:[C] je _exploration parameter_, který určuje, jak moc se má algoritmus zaměřovat na prozkoumávání nových uzlů.
* stem:[n] je počet her, ve kterých byl zvolen rodičovský uzel.
* stem:[n_j] je počet her, ve kterých byl zvolen uzel stem:[j].
--

=== Hierarchické hledání cest

[quote]
____
Nejdřív najde cestu mezi domy, pak teprve cestu od vchodových dveří k ledničce.
____

Nejprve hledá cestu na vysoké úrovni (mezi clustery), pak v rámci clusteru.

IMPORTANT: Výhodou je, že zrychluje hledání cest.

[WARNING]
--
Nevýhodou je, že vzdálenost mezi clustery se blbě měří, protože hráč do něj mohl vstoupit z různých míst. V praxi se používá třeba:

* nejkratší vzdálenost,
* nejdelší vzdálenost,
* průměrná minimální vzdálenost.

--

== Rozhodování

Agenti obvykle musí činit rozhodnutí ohledně toho, co budou dělat dál: zaútočit, ukrýt se, prchat, atd.

=== Decision trees / rozhodovací stromy

Rozhodnutí jsou reprezentována jako strom. Vniřní uzly jsou podmínky, listy jsou akce, hrany reprezentují možnosti. Rozhodovací proces začíná u kořene a postupuje dolů stromem, dokud nenarazí na list -- ta akce se následně provede.

.Průchod rozhodovacím stromem <<ai-for-games>>
image::./img/vph06_decision_trees.png[width=500]

=== State machines / stavové automaty

Reprezentuje aktuální chování agenta pomocí stavů ve stavovém automatu. Každý stav zahrnuje nějaké akce. Přechody mezi stavy jsou spojeny s podmínkami a akcemi.

.State machine <<ai-for-games>>
image::./img/vph06_state_machine.png[width=500]

Hierarchické stavové automaty::
Stavy mohou obsahovat celé další stavové automaty. To umožňuje rozdělit chování agenta na části.
+
.Hierarchical state machine <<ai-for-games>>
image::./img/vph06_hierarchical_state_machine.png[width=500]

Stavový automat s rozhodovacími stromy v přechodech::
V přechodech mezi stavy jsou decision trees. Listy jsou další stavy.
+
.State machine with decision tree transitions <<ai-for-games>>
image::./img/vph06_decision_tree_state_machine.png[width=500]

=== Behavior trees / stromy chování

--
* Návrhový vzor používáný v herním vývoji.
* Je orientovaný na _úkoly_ (tasks) spíš než na _stav_ (state).
* Kombinuje množství jiných technik.
* Dá se vyrobit modulárně a znovupoužitelně.
* Často pro něj existují i custom editory s GUI.
--

.Behavior tree <<ai-for-games>>
image::./img/vph06_behavior_tree.png[width=500]

.Parallel behavior tree <<pa217>>
image::./img/vph06_parallel_behavior_tree.png[width=500]

Listy::
--
* _Conditions_ (podmínky): vyhodnocují nějakou podmínku vůči postavě, hráči nebo hře. Mohou uspět nebo selhat.
* _Actions_ (akce): mění stav hry, pouští animace, interagují s hráčem. Obvykle uspějí, ale mohou selhat (např. pokud jsou přerušeny).
--

Vnitřní uzly::
--
* _Sequences_ (sekvence) stem:[\to]: vykonávají své potomky po řadě, dokud _první_ *neselže*. Uspěje jen pokud uspějí všichni. Je to takový `AND`.
* _Selectors_ (selektory) stem:[?]: vykonávají své potomky po řadě, dokud _první_ není *úspěšný*. Selže, pokud neuspěje žádný. Je to takový `OR`.
* _Parallel sequence/selector_ stem:[\rightrightarrows] / stem:[???]: pouští všechny potomky najednou. Vyhodnocení zůstavá stejné.
--

Decorator / dekorátor::
Obaluje nějaký uzel a mění jeho chování.

Filtery::
Rozhodují, jestli akci provedou nebo ne, případně až po nějakém čase či s nějakou pravděpodobností. Např. nemusí být žádoucí, aby se agent pořád dokola snažil otevřít dveře.


== Strategie a taktika

Řeší rozhodování při nedostatku informací, koordinaci více agentů, plánování, atd.

=== Waypoints / navigační body

Waypoint je pozice v levelu, která je něčím zajímavá.

Pathfinding nodes::
Místa kudy se dá projít.

Tactical locations / rally points::
Místa kde se skrýt před útokem, místa ke snipení, místa pro ambush, atd.
+
.Tactical locations <<ai-for-games>>
image::./img/vph06_tactical_locations.png[width=500]

Context sensitive locations / závislost na kontextu::
Tactical locations mohou záviset na kontextu, třeba pozici protihráčů a jejich chování. Závislost na kontextu je implementována tak, že hodnota waypointu je předpočítána pro několik různých situací, či dodatečnou prací (např. ray castem) za běhu hry.

=== Taktická analýza

Vyskytuje se primárně ve real-time strategických (RTS) hrách.

Influence maps::
* Reprezentují aktuální vojenské působení agentů v dané oblasti.
* Může být např. dán počtem jednotek a budov a jejich silou.
* Upadá se vzdáleností od jednotek.
* Používají se k určení toho, které oblasti jsou bezpečné a kterým je lepší se vyhnout, nebo kde jsou nepřátelské hranice nejslabší.
+
.Influence map by link:https://www.gamedev.net/tutorials/programming/artificial-intelligence/the-core-mechanics-of-influence-mapping-r2799/[gamedev.net]
image::./img/vph06_influence_maps.png[width=500]

Terrain analyses::
Podobné waypointům ale pro vnější prostředí. Popisují, jak težké je daným terénem projít, jaká je na něm viditelnost, cover, možnost útect, potenciál ke snipení, atd.

Multi-layer analyses::
Informace v taktických analýzách lze rozdělit do tří kategorií:
+
--
* _Statické_: např. pozice budov, terén, atd. Dají se předpočítat.
* _Vyvíjející se / evolving_: např. vojenský vliv, zdroje. Počítají se průběžně, ale analýzu lze přerušit.
* _Dynamické_: např. urgentní nebezpečí, dynamické stíny. Počítají se ad hoc za běhu.
--

.Umístění radaru
====
Zajímá nás:

* Bezpečnost lokace. _Nechceme, aby ho hned zničili._
* Viditelnost lokace. _Čím viditelnější, tím lépší. Je to radar; chce vidět._
* Vzdálenost od jiných radarů. _Nemá smysl je stavět blízko sebe._

Možné řešení:

[stem]
++++
\begin{aligned}

\text{Vhodnost} &= \text{Bezpečnost} \cdot \text{Viditelnost} \cdot \text{Vzdálenost}

\end{aligned}
++++

====

[bibliography]
== Zdroje

* [[[pa217, 1]]] PA217 AI for Games
* [[[ai-for-games, 2]]] Ian Millington, John Funge: Artificial Intelligence for Games
* [[[steering, 3]]] link:https://slsdo.github.io/steering-behaviors/[Steering Behaviors]
* [[[navmesh, 4]]] link:https://docs.unity3d.com/Manual/nav-NavigationSystem.html[Navigation System in Unity]
* [[[astar, 5]]] link:https://www.redblobgames.com/pathfinding/a-star/introduction.html[Introduction to the A* Algorithm]
* [[[civ5, 6]]] link:https://store.steampowered.com/app/8930/Sid_Meiers_Civilization_V/[Sid Meier's Civilization V]
* [[[monte-carlo, 7]]] link:https://en.wikipedia.org/wiki/Monte_Carlo_method[Wikipedia: Monte Carlo method]
* [[[mcts, 8]]] link:https://en.wikipedia.org/wiki/Monte_Carlo_tree_search[Wikipedia: Monte Carlo tree search]
* [[[ida-star, 9]]] link:https://en.wikipedia.org/wiki/Iterative_deepening_A*[Wikipedia: Iterative deepening A*]
